// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pubbet/v1/pubbet.proto

package pubbetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Pubbet_PublishMessages_FullMethodName = "/pubbet.v1.Pubbet/PublishMessages"
	Pubbet_ListenMessages_FullMethodName  = "/pubbet.v1.Pubbet/ListenMessages"
)

// PubbetClient is the client API for Pubbet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubbetClient interface {
	PublishMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishMessagesRequest, PublishMessagesResponse], error)
	ListenMessages(ctx context.Context, in *ListenTopicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TopicMessages], error)
}

type pubbetClient struct {
	cc grpc.ClientConnInterface
}

func NewPubbetClient(cc grpc.ClientConnInterface) PubbetClient {
	return &pubbetClient{cc}
}

func (c *pubbetClient) PublishMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishMessagesRequest, PublishMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Pubbet_ServiceDesc.Streams[0], Pubbet_PublishMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PublishMessagesRequest, PublishMessagesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pubbet_PublishMessagesClient = grpc.ClientStreamingClient[PublishMessagesRequest, PublishMessagesResponse]

func (c *pubbetClient) ListenMessages(ctx context.Context, in *ListenTopicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TopicMessages], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Pubbet_ServiceDesc.Streams[1], Pubbet_ListenMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenTopicRequest, TopicMessages]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pubbet_ListenMessagesClient = grpc.ServerStreamingClient[TopicMessages]

// PubbetServer is the server API for Pubbet service.
// All implementations must embed UnimplementedPubbetServer
// for forward compatibility.
type PubbetServer interface {
	PublishMessages(grpc.ClientStreamingServer[PublishMessagesRequest, PublishMessagesResponse]) error
	ListenMessages(*ListenTopicRequest, grpc.ServerStreamingServer[TopicMessages]) error
	mustEmbedUnimplementedPubbetServer()
}

// UnimplementedPubbetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPubbetServer struct{}

func (UnimplementedPubbetServer) PublishMessages(grpc.ClientStreamingServer[PublishMessagesRequest, PublishMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PublishMessages not implemented")
}
func (UnimplementedPubbetServer) ListenMessages(*ListenTopicRequest, grpc.ServerStreamingServer[TopicMessages]) error {
	return status.Errorf(codes.Unimplemented, "method ListenMessages not implemented")
}
func (UnimplementedPubbetServer) mustEmbedUnimplementedPubbetServer() {}
func (UnimplementedPubbetServer) testEmbeddedByValue()                {}

// UnsafePubbetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubbetServer will
// result in compilation errors.
type UnsafePubbetServer interface {
	mustEmbedUnimplementedPubbetServer()
}

func RegisterPubbetServer(s grpc.ServiceRegistrar, srv PubbetServer) {
	// If the following call pancis, it indicates UnimplementedPubbetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Pubbet_ServiceDesc, srv)
}

func _Pubbet_PublishMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubbetServer).PublishMessages(&grpc.GenericServerStream[PublishMessagesRequest, PublishMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pubbet_PublishMessagesServer = grpc.ClientStreamingServer[PublishMessagesRequest, PublishMessagesResponse]

func _Pubbet_ListenMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenTopicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubbetServer).ListenMessages(m, &grpc.GenericServerStream[ListenTopicRequest, TopicMessages]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pubbet_ListenMessagesServer = grpc.ServerStreamingServer[TopicMessages]

// Pubbet_ServiceDesc is the grpc.ServiceDesc for Pubbet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pubbet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubbet.v1.Pubbet",
	HandlerType: (*PubbetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishMessages",
			Handler:       _Pubbet_PublishMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListenMessages",
			Handler:       _Pubbet_ListenMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubbet/v1/pubbet.proto",
}
